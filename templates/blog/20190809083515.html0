<h2>すべてのページをgitで管理</h2>

Giblogでは、すべてのファイルは静的なファイルとしてGitで管理できます。

Giblogは、動的にWebサイトを生成するCMSツールではなく、静的にWebサイトを生成するCMSツールです。

ブログ記事やJavaScriptやスタイルシートや画像ファイル、動画ファイルは、すべてファイルとして管理できます。

データベースに関する知識は、まったく必要がありません。

<h3>記事のグループ管理機能</h3>

Giglogは、記事の管理機能を、Gitにすべてゆだねています。

Gitが得意とするのは、プログラムの共同開発です。複数人で共同してプログラムを開発するという目的のために、Gitは活用されています。

このプログラムの共同管理機能を、記事のグループ管理機能として使うことができます。

<a href="https://github.co.jp/">Github</a>にWebサイトのリポジトリを作成して、共同記事の執筆者が、リポジトリをクローンします。

共同執筆者が、自分のローカル環境で、記事を書いて、プルリクエストを依頼します。

すると、メインの執筆者が、その記事の内容を、自分のリポジトリに取り込むことができます。

この記事の管理方法は、セキュリティという面を考えても非常に強固です。

動的にWebサイトを生成するCMSツールでは、記事のグループ管理を行うには、管理画面から、IDとパスワードを入力することを必要とします。

Giblogは、静的にWebサイトを生成するツールであり、共同管理をGitにゆだねるので、セキュリティ上のリスクが軽減されます。

ツールの側のセキュリティホールのために、Webサイトが書き換えられ、企業信用が棄損されるということが、起こらないのです。

<h3>gitによる手軽なデプロイ</h3>

本番環境へのデプロイは、公開ファイルを管理しているgitリポジトリを、プロダクション環境に「git clone」するだけです。

<pre>
git clone 公開ファイルのgitリポジトリのURL
</pre>

2回目以降のデプロイは、git pull origin masterをするだけです。

<pre>
cd mysite
git pull origin master
</pre>

<h3>gitによる手軽なバックアップ</h3>

gitは分散管理のリポジトリシステムで、ファイルの変更履歴を、それぞれのリポジトリに完全に保存しています。

つまり、バックアップするには、gitのリポジトリをコピーすればよいだけということになります。

以下のような構成にしておけば、簡単に3重バックアップできます。

<pre>
Github

開発用サーバー

バックアップサーバー
</pre>

開発用サーバーで、Webサイトを作成します。リソースリポジトリをGithubにpushします。

バックアップサーバーでcronを記述して、Githubから、定期的にgit pull origin masterするようにします。
